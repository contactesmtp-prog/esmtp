# version: '3'

# services:
#   payload:
#     image: node:18-alpine
#     ports:
#       - '3000:3000'
#     volumes:
#       - .:/home/node/app
#       - node_modules:/home/node/app/node_modules
#     working_dir: /home/node/app/
#     command: sh -c "yarn install && yarn dev"
#     depends_on:
#       - mongo
#     env_file:
#       - .env

#   mongo:
#     image: mongo:latest
#     ports:
#       - '27017:27017'
#     command:
#       - --storageEngine=wiredTiger
#     volumes:
#       - data:/data/db
#     logging:
#       driver: none

# volumes:
#   data:
#   node_modules:


version: '3.9'

services:
  postgres:
    image: postgres:17
    container_name: postgres
    restart: always
    ports:
      - "5433:5432"
    volumes:
        - esmtp-postgres:/var/lib/postgresql/esmtpdata
    environment:
      TZ: UTC
      POSTGRES_USER: esmtp_user
      POSTGRES_PASSWORD: esmtp_password
      POSTGRES_DB: esmtp_DB
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U esmtp_user -d esmtp_DB"]
      interval: 10s
      timeout: 5s
      retries: 5

  minio:
    image: minio/minio:latest
    container_name: minio
    restart: always
    ports:
      - "9000:9000"  # S3 API
      - "9001:9001"  # MinIO Console
    volumes:
      - minio-esmtp:/data
    environment:
      TZ: UTC
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: admin123
    command: server /data --console-address ":9001"

  app:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        PAYLOAD_SECRET: ${PAYLOAD_SECRET}
        DATABASE_URI: ${DATABASE_URI}
    container_name: app
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_started
    env_file:
      - .env
    environment:
      TZ: UTC
      S3_ENDPOINT: http://minio:9000
      S3_REGION: us-east-1
      S3_ACCESS_KEY_ID: admin
      S3_SECRET_ACCESS_KEY: admin123
      S3_BUCKET: esmtp-media
      PAYLOAD_SECRET: ${PAYLOAD_SECRET}
      DATABASE_URI: ${DATABASE_URI}
    command: >
      sh -c "
          until nc -z postgres 5432;
          do echo '⏳ Waiting for postgres...';
          sleep 2;
          done;
          echo '✅ Postgres is ready';
          pnpm build && pnpm start
          "

  nginx:
    image: nginx:alpine
    container_name: nginx
    restart: always
    depends_on:
      - app
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro

volumes:
  esmtp-postgres:
    external: true
  minio-esmtp:
    external: true
