# version: '3'

# services:
#   payload:
#     image: node:18-alpine
#     ports:
#       - '3000:3000'
#     volumes:
#       - .:/home/node/app
#       - node_modules:/home/node/app/node_modules
#     working_dir: /home/node/app/
#     command: sh -c "yarn install && yarn dev"
#     depends_on:
#       - mongo
#     env_file:
#       - .env

#   mongo:
#     image: mongo:latest
#     ports:
#       - '27017:27017'
#     command:
#       - --storageEngine=wiredTiger
#     volumes:
#       - data:/data/db
#     logging:
#       driver: none

# volumes:
#   data:
#   node_modules:


version: '3.9'

services:
  postgres-esmtp:
    image: postgres:17
    container_name: postgres-esmtp
    restart: always
    ports:
      - "5434:5432"
    volumes:
      - esmtp-postgres:/var/lib/postgresql/data
    env_file:
      - .env.docker
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  minio-esmtp:
    image: minio/minio:latest
    container_name: minio-esmtp
    restart: always
    ports:
      - "9100:9000"  # S3 API
      - "9101:9001"  # MinIO Console
    volumes:
      - minio-esmtp:/data
    env_file:
      - .env.docker
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5

  app-esmtp:
    build:
      context: .
      dockerfile: Dockerfile 
    container_name: app-esmtp
    depends_on:
      postgres-esmtp:
        condition: service_healthy
      minio-esmtp:
        condition: service_healthy
    env_file:
      - .env.docker
    command: sh -c "rm -rf .next && pnpm build && pnpm start"

  nginx-esmtp:
    image: nginx:stable-alpine
    container_name: nginx-esmtp
    restart: always
    depends_on:
      - app-esmtp
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro

volumes:
  esmtp-postgres:
  minio-esmtp:

   
